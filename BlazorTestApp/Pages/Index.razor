@page "/"
@using BehindTheWheel.GameMechanics
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<h1>Behind The Wheel</h1> <h4>10/09/2022</h4>

Enter the password:
<input type="text" @bind=@Password />
<br />

<table border="1" style="width:500px">
    <colgroup>
        <col span="2" style="width:40%" />
        <col span="3" style="width:20%" />
    </colgroup>
    <tr>
        <td align="center">@players[0].Name</td>
        <td align="center">@players[1].Name</td>
        <td align="center"><button class="btn btn-primary" @onclick="ThrowDice">Throw dice</button></td>

    </tr>
    <table border="0" style="width:100%">
        <tr style="width:100%">
            <textarea readonly="readonly" align="left" border="1" style=@CardStyle[0]>@players[0].Text
                </textarea>
        </tr>
        <tr align="center">
                <td>@players[0].Points</td>
        </tr>
            <tr align="center">
                <td>@players[0].Cash</td>
            </tr>
        </table>
    <td>
        <table border="0" style="width:100%">
            <tr style="height:300px">
                <textarea readonly="readonly" align="left" border="1" style=@CardStyle[1]>@players[1].Text
                </textarea>
            </tr>
            <tr align="center">
                <td>@players[1].Points</td>
            </tr>
            <tr align="center">
                <td>@players[1].Cash</td>
            </tr>
        </table>
    </td>
    <td>
        <table border="1" style="width:100%">
            <tr>
                <textarea readonly="readonly" align="left" border="1" style="height:300px">@commentary
                </textarea>
            </tr>
            <tr>
                Enter the dice throw:
                <input type="number" @bind=diceNumber @onkeyup="@diceThrow" />
                @*onkeyup AFTER number has been entered*@
            </tr>
        </table>
    </td>

</table>

@*Pop up test*@

@*<button type="button" class="btn btn-primary"
        @onclick="() => OpenDialog(new List<string> {publisherName})">
    &#8195;Save&#8195;
</button>&#8194;
*@
@if (DialogIsOpen)
{
    <Dialog Caption="Tech Time"
        Answers="@message"
        OnClose="@OnDialogClose"
        Type="Dialog.Category.OneToSix"
        ButtonsRequired=buttonsRequired
    >
    </Dialog>
}
@if (ConfirmDialogIsOpen)
{
    <Dialog Caption="@dialogTitle"
        Answers="@message"
        OnClose="@OnDialogClose"
        Type="Dialog.Category.Okay">
    </Dialog>
}

<Window x:Class = "XAMLGrid.Window1" 
   xmlns = "http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
   xmlns:x = "http://schemas.microsoft.com/winfx/2006/xaml" 
   Title = "Window1" Height = "300" Width = "604">
    
   <linkhref ="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
   
   <Grid x:Name = "FormLayoutGrid" Background = "LightGray"> 
      <Grid.ColumnDefinitions> 
         <ColumnDefinition Width = "Auto" /> 
         <ColumnDefinition /> 
      </Grid.ColumnDefinitions> 
		
      <Grid.RowDefinitions> 
         <RowDefinition Height = "*" /> 
         <RowDefinition Height = "*" /> 
         <RowDefinition Height = "*" /> 
      </Grid.RowDefinitions> 
		
      <TextBlock Grid.Row = "0" Grid.Column = "0" Text = "Name" 
         Margin = "10" HorizontalAlignment = "Left" VerticalAlignment = "Center" 
         Width = "100"/> 
      
      <TextBox Grid.Row = "0" Grid.Column = "1" Margin = "10"/> 
      <TextBlock Grid.Row = "1" Grid.Column = "0" Text = "ID" Margin = "10" 
         HorizontalAlignment = "Left" VerticalAlignment = "Center" Width = "100"/> 
      
      <TextBox Grid.Row = "1" Grid.Column = "1" Margin = "10"/> 
      <TextBlock Grid.Row = "2" Grid.Column = "0" Text = "Age" Margin = "10" 
         HorizontalAlignment = "Left" VerticalAlignment = "Center" Width = "100"/> 
      
      <TextBox Grid.Row = "2" Grid.Column = "1" Margin = "10"/>
   </Grid> 
	
</Window>	

@*@inject IModalService modal

<h5>Click this button Show Modal Popup</h5>
<button @onclick="@(()=>modal.Show<Counter>("Modal Popup Example"))" class="btn btn-primary">View</button>
*@

@code
{
    private static string[] CardStyle = { 
        "background-color: #cfc ; height:300px",
        "background-color: #cfc ; height:300px"};

    public static void CardColour(string squareType, int cardNo)
    {
        switch (squareType)
        {
            case ".GreenSquare":
                CardStyle[cardNo] = "color: white; background-color: green ; height:300px";
                break;
            case ".RedSquare":
                CardStyle[cardNo] = "color: white; background-color: red ; height:300px";
                break;
            case ".AmberSquare":
                CardStyle[cardNo] = "color: white; background-color: orange ; height:300px";
                break;
            case ".BrooklandsSquare":
            case ".FirstBrooklandsSquare":
            case ".LastBrooklandsSquare":
                CardStyle[cardNo] = "color: darkblue; background-color: skyblue ; height:300px";
                break;
            default:
                CardStyle[cardNo] = "color: black; background-color: white ; height:300px";
                break;
        }

    }
    public static string Password { get; set; }
    public int DiceThrow { get; set; }

    public static BehindTheWheel.GameMechanics.Move mv = new BehindTheWheel.GameMechanics.Move();
    public static BlazorTestApp.Pages.Index Instance;

    public Index()
    {
        Instance = this;
    }

    public void refreshTheScreen()
    {
        Task.Run(StateHasChanged);
    }

    private int diceNumber;
    private void diceThrow(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
        {
            mv.fixedThrow(diceNumber);
        }
    }
    public static Player[] players = { new Player(name : "Ray", text : "START", points : "Points: 10", "Cash: 0" ),
    new Player(name : "Tony", text : "START", points : "Points: 10", "Cash: 0" )};
    public static string commentary = null;




    public class Player
    {
        public string Name { get; set; }

        public string Text { get; set; }

        public string Points { get; set; }

        public string Cash { get; set; }

        public Player(string name, string text, string points, string cash)
        {
            Name = name;
            Text = text;
            Points = points;
            Cash = cash;
        }
    }
    private void ThrowDice()
    {
        mv.throwDice();
    }
    protected override async Task OnInitializedAsync()
    {
        //TheSpiritOfBrooklandsCards.theSpiritOfBrooklandsCards = await Http.GetFromJsonAsync<List<TheSpiritOfBrooklandsCard>>("resources/theSpiritOfBrooklandsCards.json");
        //ToolTimeCards.toolTimeCards = await Http.GetFromJsonAsync<List<ToolTimeCard>>("resources/ToolTimeCards.json");
        //TechTimeCards.techTimeCards = await Http.GetFromJsonAsync<List<TechTimeCard>>("resources/TechTimeCards.json");
        TheSpiritOfBrooklandsCards.Load();
        ToolTimeCards.Load();
        TechTimeCards.Load();
    }

    public static Boolean DialogIsOpen { get; set; }
    public static Boolean ConfirmDialogIsOpen { get; set; }
    private string publisherName = "FRED";
    private static List<string> message;
    private static string dialogTitle;
    public static int response;
    public static int buttonsRequired;

    public static void OpenDialog(List<string> answers)
    {
        DialogIsOpen = true;
        response = -1;
        message = answers;
    }
    public static void ConfirmOpenDialog(string title, List<string> answers)
    {
        dialogTitle = title;
        ConfirmDialogIsOpen = true;
        message = answers;
    }
    private async Task OnDialogClose(int selection)
    {
        response = selection;
        DialogIsOpen = false;
        ConfirmDialogIsOpen = false;
    }
}


